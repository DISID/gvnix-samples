= gvNIX quick start GEO application
Getting started with gvNIX
:page-layout: base
:toc-placement: manual
:homepage: http://gvnix.org
:download: http://code.google.com/p/gvnix/
:installguide: http://code.google.com/p/gvnix/wiki/InstallGvnix
:download: http://code.google.com/p/gvnix/downloads/

gvNIX is a Spring Roo distribution that focuses both enterprise knowledge and 
enterprise standards to build Java applications.

If you don't know _What is gvNIX?_ you should start with https://github.com/DISID/gvnix-samples/tree/master/quickstart-app[quickstart-app] tutorial.

You must {download}[download], unpack and {installguide}[install] the 
development environment for gvNIX 1.4+, to be able to follow this guide.

The goal of this quick start geo app guide is to familiarize you with GEO apps generated using gvNIX. For this 
purpose, we will build an application based on https://github.com/DISID/gvnix-samples/tree/master/quickstart-app[quickstart-app] tutorial.


image:images/map.png[width="100%"]


== Guide

You can execute https://github.com/DISID/gvnix-samples/blob/master/quickstart-geo-app/quickstart-geo.roo[quickstart-geo.roo] file and creates a petclinic example application with GEO components.

If you don't have experience using gvNIX, you can follow https://github.com/DISID/gvnix-samples/tree/master/quickstart-app#guide[quickstart-app guide] and then follow this to generate additional GEO components and functionalities.

This guide teaches you how to:

. <<configure-persistence, Configure Persistence>>
. <<add-spatial-support, Add Spatial Support>>
. <<add-geo-entity-fields, Add Geo Entity Fields>>
. <<generate-geo-entity-finders, Generate Geo Entity Finders>>
. <<generate-map-views, Generate Map Views>>
. <<geo-web-layer, Add entities to Map Views>>
. <<web-geo-fields, Use Map Control on CRU>>
. <<base-layers, Add Base Layers to Map Views>>
. <<base-tools, Add Tools to Map Views>>


[[configure-persistence]]
== Configure Persistence

All DataBases are not valid to use Spatial Operations. 

That's why we need to configure our project with some valid Spatial DB. We can choose one of the following:

. http://www.postgresql.org/[PostgreSql]
. http://www.oracle.com/us/products/database/overview/index.html[Oracle 10g/11g]
. http://www.mysql.com/[MySQL]
. http://www.microsoft.com/es-es/server-cloud/products/sql-server/[SqlServer]
. https://github.com/jdeolive/geodb[GeoDB (H2)]

To follow this guide, you should configure a POSTGRES database on your system and add POSTGIS functionalities. To make that possible you can read http://trac.osgeo.org/postgis/[postgis documentation].

When you have a valid POSTGIS Database configured on your system, you can execute the following command with your database configuration:

[source,shell]
jpa setup --provider HIBERNATE --database POSTGRES --userName USERNAME --databaseName DATABASENAME --password PASSWORD --hostName HOSTNAME


Now, you have your project configured to use a valid Spatial Database.

[[add-spatial-suppot]]
== Add Spatial Support

Your Database is configured to accept GEO types and GEO functionalities, but not your project. 

To do that, you need to configure your project persistence with some valid Spatial Provider like http://www.hibernatespatial.org[Hibernate Spatial].

Execute the following command on your gvNIX shell to add spatial support:

[source,shell]
jpa geo setup --provider HIBERNATE_SPATIAL 

NOTE: _This Spatial Provider is only available if your provider persistence is HIBERNATE and you select https://github.com/DISID/gvnix-samples/tree/master/quickstart-geo-app#configure-persistence[a valid DB]_


[[add-geo-entity-fields]]
== Add Geo Entity Fields

Now, you can add new fields to your generated Entites. (If you don't generate entities before you should check https://github.com/DISID/gvnix-samples/tree/master/quickstart-app#create-the-domain-entities[quickstart-app guide])

You can add some different field types: POLYGON, POINT, LINESTRING, MULTILINESTRING, GEOMETRY, etc...

You should execute the following to add new fields on Owner entity:

[source,shell]
field geo --fieldName location --type POINT --class ~.domain.Owner
field geo --fieldName distance --type LINESTRING --class ~.domain.Owner
field geo --fieldName area --type POLYGON --class ~.domain.Owner


NOTE: _Geo Field commands will not be available until you install Hibernate Spatial Provider._


[generate-geo-entity-finders]
== Generate Geo Entity Finders

To get GEO fields values on a map view we need to generate some different methods with Spatial functionalities. 

You can make it possible generating all finder methods for all entities with GEO fields. To do that, you need to execute the following command:

[source, shell]
finder geo all

On the other hand, if you want to generate finder methods of an specific entity with geo fields, you need to execute the following command:

[source, shell]
finder geo add --class ~.domain.Owner

NOTE: _If you execute finder geo add command on a entity that not has geo fields, you are going to get an error message._


[generate-map-views]
== Generate Map Views



