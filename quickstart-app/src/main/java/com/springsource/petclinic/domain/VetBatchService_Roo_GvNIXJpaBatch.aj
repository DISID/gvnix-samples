// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.springsource.petclinic.domain;

import com.mysema.query.BooleanBuilder;
import com.mysema.query.jpa.impl.JPAQuery;
import com.mysema.query.types.path.PathBuilder;
import com.springsource.petclinic.domain.Vet;
import com.springsource.petclinic.domain.VetBatchService;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.springframework.transaction.annotation.Transactional;

privileged aspect VetBatchService_Roo_GvNIXJpaBatch {
    
    public Class VetBatchService.getEntity() {
        return Vet.class;
    }
    
    public EntityManager VetBatchService.entityManager() {
        return Vet.entityManager();
    }
    
    @Transactional
    public int VetBatchService.deleteAll() {
        TypedQuery<Vet> query = entityManager().createQuery("Select o FROM Vet o", Vet.class);
        List<Vet> vets = query.getResultList();
        delete(vets);
        return vets.size();
    }
    
    @Transactional
    public int VetBatchService.deleteIn(List<Long> ids) {
        TypedQuery<Vet> query = entityManager().createQuery("SELECT o FROM Vet o WHERE o.id IN (:idList)", Vet.class);
        query.setParameter("idList", ids);
        List<Vet> vets = query.getResultList();
        delete(vets);
        return vets.size();
    }
    
    @Transactional
    public int VetBatchService.deleteNotIn(List<Long> ids) {
        TypedQuery<Vet> query = entityManager().createQuery("SELECT o FROM Vet o WHERE o.id NOT IN (:idList)", Vet.class);
        query.setParameter("idList", ids);
        List<Vet> vets = query.getResultList();
        delete(vets);
        return vets.size();
    }
    
    @Transactional
    public void VetBatchService.create(List<Vet> vets) {
        for( Vet vet : vets) {
            vet.persist();
        }
    }
    
    @Transactional
    public List<Vet> VetBatchService.update(List<Vet> vets) {
        List<Vet> merged = new ArrayList<Vet>();
        for( Vet vet : vets) {
            merged.add( vet.merge() );
        }
        return merged;
    }
    
    public List<Vet> VetBatchService.findByValues(Map<String, Object> propertyValues) {
        
        // if there is a filter
        if (propertyValues != null && !propertyValues.isEmpty()) {
            // Prepare a predicate
            BooleanBuilder baseFilterPredicate = new BooleanBuilder();
            
            // Base filter. Using BooleanBuilder, a cascading builder for
            // Predicate expressions
            PathBuilder<Vet> entity = new PathBuilder<Vet>(Vet.class, "entity");
            
            // Build base filter
            for (String key : propertyValues.keySet()) {
                baseFilterPredicate.and(entity.get(key).eq(propertyValues.get(key)));
            }
            
            // Create a query with filter
            JPAQuery query = new JPAQuery(Vet.entityManager());
            query = query.from(entity);
            
            // execute query
            return query.where(baseFilterPredicate).list(entity);
        }
        
        // no filter: return all elements
        return Vet.findAllVets();
    }
    
    @Transactional
    public long VetBatchService.deleteByValues(Map<String, Object> propertyValues) {
        List<Vet> vets = findByValues(propertyValues);
        delete(vets);
        return (long)vets.size();
    }
    
    @Transactional
    public void VetBatchService.delete(List<Vet> vets) {
        for( Vet vet : vets) {
            vet.remove();
        }
    }
    
}
